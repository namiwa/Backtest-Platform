{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the ticker number here: 002547\n",
      "intraday for [002547.SZ] saved.\n",
      "Epoch 1/10\n",
      "410/410 [==============================] - 3s 6ms/step - loss: 0.6980\n",
      "Epoch 2/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0437\n",
      "Epoch 3/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0153\n",
      "Epoch 4/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0072\n",
      "Epoch 5/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0062\n",
      "Epoch 6/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0052\n",
      "Epoch 7/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0060\n",
      "Epoch 8/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0072\n",
      "Epoch 9/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0090\n",
      "Epoch 10/10\n",
      "410/410 [==============================] - 2s 4ms/step - loss: 0.0045\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from keras.layers import Dense, LSTM, BatchNormalization\n",
    "from keras.models import Sequential\n",
    "import china_stock\n",
    "\n",
    "need_num = 90\n",
    "training_num = 500\n",
    "epoch = 10\n",
    "batch_size = 32\n",
    "\n",
    "ticker = china_stock.ticker\n",
    "\n",
    "dataset = pd.read_csv(\"/Users/zhouzijian/myproject/Backtest-Platform/cn_intraday/\" + ticker + \".csv\")\n",
    "dataset = dataset.iloc[:, 3:4].values\n",
    "training_dataset = dataset[:training_num]\n",
    "sc = MinMaxScaler(feature_range = (0, 1))\n",
    "\n",
    "\n",
    "training_dataset_scaled = sc.fit_transform(X=training_dataset)\n",
    "\n",
    "x_train = []\n",
    "y_train = []\n",
    "\n",
    "for i in range(need_num, training_dataset_scaled.shape[0]):\n",
    "\tx_train.append(training_dataset_scaled[i - need_num : i])\n",
    "\ty_train.append(training_dataset_scaled[i, 0])\n",
    "\n",
    "x_train, y_train = np.array(x_train), np.array(y_train)\n",
    "\n",
    "x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n",
    "\n",
    "model = Sequential()\n",
    "model.add(LSTM(units = 128, return_sequences = True, input_shape = [x_train.shape[1], 1]))\n",
    "model.add(BatchNormalization())\n",
    "\n",
    "model.add(LSTM(units = 128))\n",
    "model.add(BatchNormalization())\n",
    "\n",
    "model.add(Dense(units = 1))\n",
    "\n",
    "model.compile(loss = \"mse\", optimizer = \"adam\")\n",
    "model.fit(x_train, y_train, epochs = epoch, batch_size = batch_size)\n",
    "\n",
    "\n",
    "inputs = dataset[training_num - need_num:]\n",
    "inputs = inputs.reshape(-1, 1)\n",
    "inputs = sc.transform(inputs)\n",
    "\n",
    "predictions = []\n",
    "\n",
    "\n",
    "\n",
    "for i in range(need_num, inputs.shape[0]):\n",
    "\tpredictions.append(inputs[i - need_num: i, 0])\n",
    "\n",
    "predictions = np.array(predictions)\n",
    "predictions = np.reshape(predictions, (predictions.shape[0], predictions.shape[1], 1))\n",
    "\n",
    "#print(predictions)\n",
    "\n",
    "real_price = dataset[training_num:]\n",
    "predicted_price = model.predict(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>ts_code</th>\n",
       "      <th>trade_date</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>pre_close</th>\n",
       "      <th>change</th>\n",
       "      <th>pct_chg</th>\n",
       "      <th>vol</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1475</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130104</td>\n",
       "      <td>9.52</td>\n",
       "      <td>9.62</td>\n",
       "      <td>8.87</td>\n",
       "      <td>9.20</td>\n",
       "      <td>9.58</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-3.97</td>\n",
       "      <td>141343.48</td>\n",
       "      <td>128649.8955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1474</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130107</td>\n",
       "      <td>9.05</td>\n",
       "      <td>9.12</td>\n",
       "      <td>8.90</td>\n",
       "      <td>9.10</td>\n",
       "      <td>9.20</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>-1.09</td>\n",
       "      <td>69467.14</td>\n",
       "      <td>62481.2684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1473</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130108</td>\n",
       "      <td>9.05</td>\n",
       "      <td>9.60</td>\n",
       "      <td>9.01</td>\n",
       "      <td>9.42</td>\n",
       "      <td>9.10</td>\n",
       "      <td>0.32</td>\n",
       "      <td>3.52</td>\n",
       "      <td>92556.36</td>\n",
       "      <td>86278.9522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1472</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130109</td>\n",
       "      <td>9.37</td>\n",
       "      <td>9.53</td>\n",
       "      <td>9.21</td>\n",
       "      <td>9.36</td>\n",
       "      <td>9.42</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>69339.81</td>\n",
       "      <td>65032.1028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1471</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130110</td>\n",
       "      <td>9.32</td>\n",
       "      <td>9.56</td>\n",
       "      <td>9.28</td>\n",
       "      <td>9.50</td>\n",
       "      <td>9.36</td>\n",
       "      <td>0.14</td>\n",
       "      <td>1.50</td>\n",
       "      <td>63314.51</td>\n",
       "      <td>59871.3041</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0    ts_code  trade_date  open  high   low  close  pre_close  \\\n",
       "0        1475  002547.SZ    20130104  9.52  9.62  8.87   9.20       9.58   \n",
       "1        1474  002547.SZ    20130107  9.05  9.12  8.90   9.10       9.20   \n",
       "2        1473  002547.SZ    20130108  9.05  9.60  9.01   9.42       9.10   \n",
       "3        1472  002547.SZ    20130109  9.37  9.53  9.21   9.36       9.42   \n",
       "4        1471  002547.SZ    20130110  9.32  9.56  9.28   9.50       9.36   \n",
       "\n",
       "   change  pct_chg        vol       amount  \n",
       "0   -0.38    -3.97  141343.48  128649.8955  \n",
       "1   -0.10    -1.09   69467.14   62481.2684  \n",
       "2    0.32     3.52   92556.36   86278.9522  \n",
       "3   -0.06    -0.64   69339.81   65032.1028  \n",
       "4    0.14     1.50   63314.51   59871.3041  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_csv(\"/Users/zhouzijian/myproject/Backtest-Platform/cn_intraday/\" + ticker + \".csv\")\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>ts_code</th>\n",
       "      <th>trade_date</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>pre_close</th>\n",
       "      <th>change</th>\n",
       "      <th>pct_chg</th>\n",
       "      <th>vol</th>\n",
       "      <th>amount</th>\n",
       "      <th>alpha</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1475</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130104</td>\n",
       "      <td>9.52</td>\n",
       "      <td>9.62</td>\n",
       "      <td>8.87</td>\n",
       "      <td>9.20</td>\n",
       "      <td>9.58</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-3.97</td>\n",
       "      <td>141343.48</td>\n",
       "      <td>128649.8955</td>\n",
       "      <td>0.297028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1474</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130107</td>\n",
       "      <td>9.05</td>\n",
       "      <td>9.12</td>\n",
       "      <td>8.90</td>\n",
       "      <td>9.10</td>\n",
       "      <td>9.20</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>-1.09</td>\n",
       "      <td>69467.14</td>\n",
       "      <td>62481.2684</td>\n",
       "      <td>0.295505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1473</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130108</td>\n",
       "      <td>9.05</td>\n",
       "      <td>9.60</td>\n",
       "      <td>9.01</td>\n",
       "      <td>9.42</td>\n",
       "      <td>9.10</td>\n",
       "      <td>0.32</td>\n",
       "      <td>3.52</td>\n",
       "      <td>92556.36</td>\n",
       "      <td>86278.9522</td>\n",
       "      <td>0.294365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1472</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130109</td>\n",
       "      <td>9.37</td>\n",
       "      <td>9.53</td>\n",
       "      <td>9.21</td>\n",
       "      <td>9.36</td>\n",
       "      <td>9.42</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>69339.81</td>\n",
       "      <td>65032.1028</td>\n",
       "      <td>0.293563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1471</td>\n",
       "      <td>002547.SZ</td>\n",
       "      <td>20130110</td>\n",
       "      <td>9.32</td>\n",
       "      <td>9.56</td>\n",
       "      <td>9.28</td>\n",
       "      <td>9.50</td>\n",
       "      <td>9.36</td>\n",
       "      <td>0.14</td>\n",
       "      <td>1.50</td>\n",
       "      <td>63314.51</td>\n",
       "      <td>59871.3041</td>\n",
       "      <td>0.293122</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0    ts_code  trade_date  open  high   low  close  pre_close  \\\n",
       "0        1475  002547.SZ    20130104  9.52  9.62  8.87   9.20       9.58   \n",
       "1        1474  002547.SZ    20130107  9.05  9.12  8.90   9.10       9.20   \n",
       "2        1473  002547.SZ    20130108  9.05  9.60  9.01   9.42       9.10   \n",
       "3        1472  002547.SZ    20130109  9.37  9.53  9.21   9.36       9.42   \n",
       "4        1471  002547.SZ    20130110  9.32  9.56  9.28   9.50       9.36   \n",
       "\n",
       "   change  pct_chg        vol       amount     alpha  \n",
       "0   -0.38    -3.97  141343.48  128649.8955  0.297028  \n",
       "1   -0.10    -1.09   69467.14   62481.2684  0.295505  \n",
       "2    0.32     3.52   92556.36   86278.9522  0.294365  \n",
       "3   -0.06    -0.64   69339.81   65032.1028  0.293563  \n",
       "4    0.14     1.50   63314.51   59871.3041  0.293122  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['alpha'] = pd.DataFrame(predicted_price.flatten())\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a34ee3240>]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "CAPITAL = 1000000\n",
    "dataset['capital_allocation'] = CAPITAL * dataset['alpha']\n",
    "dataset[\"pct_change\"] = dataset['close'].pct_change()\n",
    "dataset[\"daily_pnl\"] = dataset[\"capital_allocation\"] * dataset[\"pct_change\"]\n",
    "plt.plot(dataset[\"daily_pnl\"].cumsum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.31537775120438377"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sharpe = np.sqrt(252) * dataset[\"daily_pnl\"].mean() / dataset[\"daily_pnl\"].std()\n",
    "sharpe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
